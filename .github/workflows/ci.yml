name: Terraform CI/CD

on:
  push:
    branches:
      - master # Runs only on pushes to the master branch

jobs:
  # terraform-lint:
  #   name: Lint and Format Terraform
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: latest

  #     - name: Terraform Format Check
  #       run: terraform fmt -check

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Terraform Validate
  #       run: terraform validate

  #     - name: Run TFLint
  #       uses: terraform-linters/setup-tflint@v4
  #       with:
  #         tflint_version: latest
  #     - run: tflint --format compact

  # terraform-security:
  #   name: Run tfsec Security Scan
  #   runs-on: ubuntu-latest
  #   needs: terraform-lint


  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Run tfsec
  #       uses: aquasecurity/tfsec-action@v1.0.0
  #       with:
  #         working_directory: .
  #         soft_fail: false # Fail the workflow if tfsec finds issues

  # terraform-apply:
  #   name: Terraform Apply
  #   runs-on: ubuntu-latest
  #   needs: terraform-security # Runs only if security scan passes

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: latest

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #           aws-region: us-east-1

  #     - name: Check if ECR Repository Exists
  #       id: check-ecr
  #       run: |
  #         if aws ecr describe-repositories --repository-names quest-container-repository-pub --region us-east-1 >/dev/null 2>&1; then
  #           echo "ECR_EXISTS=true" >> $GITHUB_ENV
  #         else
  #           echo "ECR_EXISTS=false" >> $GITHUB_ENV
  #         fi

  #     - name: Check if ALB Exists
  #       id: check-alb
  #       run: |
  #         if aws elbv2 describe-load-balancers --names quest-alb --region us-east-1 >/dev/null 2>&1; then
  #           echo "ALB_EXISTS=true" >> $GITHUB_ENV
  #         else
  #           echo "ALB_EXISTS=false" >> $GITHUB_ENV
  #         fi

  #     - name: Check if IAM Role Exists
  #       id: check-iam
  #       run: |
  #         if aws iam get-role --role-name quest-ecs-task-execution-role >/dev/null 2>&1; then
  #           echo "IAM_EXISTS=true" >> $GITHUB_ENV
  #         else
  #           echo "IAM_EXISTS=false" >> $GITHUB_ENV
  #         fi

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Terraform Apply with Conditional Targets
  #       run: |
  #         if [ "$ECR_EXISTS" = "true" ]; then
  #           terraform apply -target=aws_ecs_task_definition.quest_task -auto-approve
  #         elif [ "$ALB_EXISTS" = "true" ]; then
  #           terraform apply -target=aws_lb.quest_alb -auto-approve
  #         elif [ "$IAM_EXISTS" = "true" ]; then
  #           terraform apply -target=aws_iam_role.ecs_task_execution -auto-approve
  #         else
  #           terraform apply -auto-approve
  #         fi
  #       env:
  #         TF_VAR_aws_region: "us-east-1" # Set environment variables if needed
  
  deploy:
      name: Build and Deploy to ECS
      runs-on: ubuntu-latest
      # needs:
      #   - terraform-apply
      if: always()

      steps:
        # Checkout the repository
        - name: Checkout repository
          uses: actions/checkout@v4

        # Configure AWS Credentials (Consider using OIDC instead of access keys)
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        # Retrieve ECS Cluster Name
        - name: Get ECS Cluster Name
          id: get-cluster
          run: |
            ECS_CLUSTER=$(aws ecs list-clusters --query "clusterArns[0]" --output text --region us-east-1)
            echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
            echo "::set-output name=cluster::$ECS_CLUSTER"

        # Log in to Amazon ECR
        - name: Log in to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            registry-type: public

        - name: Set ECR Public Registry
          run: echo "ECR_PUBLIC_REGISTRY=public.ecr.aws" >> $GITHUB_ENV

        # Build, Tag, and Push Docker Image to ECR Public
        - name: Build and Push Docker Image to ECR Public
          env:
            ECR_PUBLIC_REGISTRY: public.ecr.aws
            ECR_PUBLIC_REPOSITORY: quest-container-repository-pub
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_PUBLIC_REGISTRY/$ECR_PUBLIC_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_PUBLIC_REGISTRY/$ECR_PUBLIC_REPOSITORY:$IMAGE_TAG
            echo "ECR_IMAGE=$ECR_PUBLIC_REGISTRY/$ECR_PUBLIC_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

        # Get current ECS Task Definition
        - name: Get current task definition
          run: |
            aws ecs describe-task-definition --task-definition quest-task \
              --query "taskDefinition.{family: family, taskRoleArn: taskRoleArn, executionRoleArn: executionRoleArn, networkMode: networkMode, containerDefinitions: containerDefinitions, requiresCompatibilities: requiresCompatibilities, cpu: cpu, memory: memory}" > task-definition.json

        # Validate task-definition.json exists
        - name: Validate task-definition.json exists
          run: |
            if [ ! -f task-definition.json ]; then
              echo "❌ Error: task-definition.json not found!"
              exit 1
            fi
            echo "✅ task-definition.json successfully created."

        # Register new task definition with updated image
        - name: Register new task definition
          id: register-task
          run: |
            jq --arg IMG "$ECR_IMAGE" '
              .containerDefinitions[0].image = $IMG |
              .taskRoleArn = if .taskRoleArn == null then "" else .taskRoleArn end
            ' task-definition.json > new-task-def.json

            TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
            echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
            echo "::set-output name=taskDefinitionArn::$TASK_DEF_ARN"

        # Update ECS Service with new task definition
        - name: Update ECS Service
          env:
            ECS_CLUSTER: ${{ steps.get-cluster.outputs.cluster }}
            ECS_SERVICE: quest-service
            TASK_DEF_ARN: ${{ steps.register-task.outputs.taskDefinitionArn }}
          run: |
            if [ -z "$ECS_CLUSTER" ] || [ -z "$ECS_SERVICE" ] || [ -z "$TASK_DEF_ARN" ]; then
              echo "❌ Error: One or more required environment variables are missing."
              exit 1
            fi

            echo "✅ Updating ECS Service..."
            echo "ECS_CLUSTER: $ECS_CLUSTER"
            echo "ECS_SERVICE: $ECS_SERVICE"
            echo "TASK_DEF_ARN: $TASK_DEF_ARN"

            aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --task-definition "$TASK_DEF_ARN"