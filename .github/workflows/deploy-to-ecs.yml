name: Deploy to AWS ECS

on:
  push:
    branches:
      - master  # Runs when code is pushed to the main branch

jobs:
  deploy:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS Credentials (Consider using OIDC instead of access keys)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build, Tag, and Push Docker Image to ECR
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: quest-container-repository
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition --task-definition quest-task:1 \
            --query "taskDefinition.{family: family, taskRoleArn: taskRoleArn, executionRoleArn: executionRoleArn, networkMode: networkMode, containerDefinitions: containerDefinitions, requiresCompatibilities: requiresCompatibilities, cpu: cpu, memory: memory}" > task-definition.json

      - name: Validate task-definition.json exists
        run: |
          if [ ! -f task-definition.json ]; then
            echo "Error: task-definition.json not found!"
            exit 1
          fi
          echo "task-definition.json successfully created."

      - name: Validate task definition parameters
        run: |
          REQUIRED_KEYS='["family", "taskRoleArn", "executionRoleArn", "networkMode", "containerDefinitions", "requiresCompatibilities", "cpu", "memory"]'
          jq --argjson REQUIRED_KEYS "$REQUIRED_KEYS" '
            keys_unsorted as $keys |
            ($keys - $REQUIRED_KEYS) as $missing |
            if ($missing | length) > 0 then
              "Missing keys: \($missing | join(", "))"
            else
              "All required keys are present"
            end' task-definition.json

      - name: Register new task definition with updated image
        run: |
          jq --arg IMG "$ECR_IMAGE" '
            .containerDefinitions[0].image = $IMG |
            .taskRoleArn = if .taskRoleArn == null then "" else .taskRoleArn end
          ' task-definition.json > new-task-def.json

      - name: Update ECS Service with new task definition
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEF_ARN
